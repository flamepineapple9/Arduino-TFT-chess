/*
PROJECT NAME: Mineplace
PROJECT VERSION: Sub 1.0
PROJECT DESCRIPTION: Minecraft ripoff made for an Arduino Uno/Pro Mini with a 1.8" tft
                     display and a joystick (will be d-pad) control scheme.
CONTRIBUTERS: RyanYasuda and grace0lkjhb.
CHECK READ ME FOR MORE INFORMATION
*/





//----------SETUP----------

//import libraries
#include <SPI.h>
#include <Adafruit_GFX_Buffer.h>
#include <Adafruit_GFX.h>
#include <Adafruit_ST7735.h>
#include <ButtonDebounce.h>
#include <math.h>


//for the joystick
#define Y_PIN A2 //orange wire
#define X_PIN A3 //yellow wire
#define SW_PIN 2 //green wire
#define MIN_CLICK 100 //debounce ms
#define MAX_DCLICK 500 //double-click cutoff


//for the lcd rgb display
#define TFT_SS 7
#define RST 8
#define DC 9
#define SD_SS 10


//library variable/object definitions
Adafruit_GFX_Buffer<Adafruit_ST7735> screen = Adafruit_GFX_Buffer<Adafruit_ST7735>(80, 160,  Adafruit_ST7735(TFT_SS, DC, RST)  );
ButtonDebounce button(SW_PIN, MIN_CLICK);


void setup() {
  screen.initR(INITR_BLACKTAB); // for 1.8' TFT
  screen.setTextWrap(false); // Allow text to run off the edge
  screen.setRotation(0);
  screen.fillScreen(ST7735_BLACK); //sets bg as black
  screen.setTextSize(1); //smallest text size
  screen.setTextColor(ST7735_WHITE);
  screen.setCursor(0,0); //puts cursor in top left, (which is where the text is printed from)
  randomSeed(analogRead(A5)); //Seed with bogus read
  Serial.begin(9600);
  GameSetup();
}





//----------CONSTANTS----------

const unsigned int WORLD_X = 7;
const unsigned int WORLD_Y = 7;
const unsigned int WORLD_Z = 7;





//----------VARIABLES----------

//        [x][y][z]
bool World[8][8][8] = 
  {{{true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false}},
    
   {{true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false}},
    
   {{true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false}},
    
   {{true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false}},
    
   {{true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false}},
    
   {{true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false}},
    
   {{true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false}},
    
   {{true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false},
    {true, true, false, false, false, false, false, false}}};


//player location data
unsigned float PlayerPitch = 0; //from negative z
unsigned float PlayerYaw = 0;   //from positive x
unsigned float PlayerX = 0;
unsigned float PlayerY = 0;
unsigned int PlayerZ = 3;     //from feet
unsigned int JumpTimer = 0;


//player internal data
unsigned int PlayerDirt = 0;





//----------GAME MECHANICS----------

void PlayerUpdate(){
  JumpUpdate();
  MovementUpdate();
}


void JumpUpdate(){
  return;
}


void MovementUpdate(){
  return;
}





//----------RENDERING----------

void Render(){
  for(var l=WORLD_X+WORLD_Y; l>0; l--){    //layer
    for(var z=0-WORLD_Z; z<=WORLD_Z; z++){ //z
      if(){                                //possible?
        for(var r=0; r<=; r++){            //ratio
          if(&&World[round(PlayerX)-][round(PlayerY)-][z]){ //Ryan here, could error, out of index, should be fine
            GenerateSides(round(PlayerX)-,round(PlayerY)-,z);
          }
          if(&&World[round(PlayerX)-][round(PlayerY)-][z]){
            GenerateSides(round(PlayerX)-,round(PlayerY)-,z);
          }
          if(&&World[round(PlayerX)-][round(PlayerY)-][z]){
            GenerateSides(round(PlayerX)-,round(PlayerY)-,z);
          }
          if(&&World[round(PlayerX)-][round(PlayerY)-][z]){
            GenerateSides(round(PlayerX)-,round(PlayerY)-,z);
          }
        }
      }
    }
  }
}


void GenerateSides(int x, int y, int z){
  if(){
    Rasterize(x,y,z, );
  }
  if(){
    Rasterize(x,y,z, );
  }
  if(){
    Rasterize(x,y,z, );
  }
}


void Rasterize(int x, int y, int z, int side){
  fillTriangle(x0,y0,x1,y1x2,y2,color);
  fillTriangle(x0,y0,x1,y1x2,y2,color);
  drawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
  drawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
  drawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
  drawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
}





//----------MAIN----------

void GameSetup(){
  return;
}


void loop(){
  PlayerUpdate();
  Render();
}
